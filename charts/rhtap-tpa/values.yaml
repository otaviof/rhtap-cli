---
#
# Trusted Profile Analyzer (Trustification)
#
trustedProfileAnalyzer:
  # Controls whether the Trusted Profile Analyzer (Trustification) is enabled,
  # which includes the deployment of the application components, and the Keycloak
  # Realm import.
  enabled: true
  # Trustification's "appDomain" attribute.
  appDomain: __OVERWRITE_ME__
  # TPA Keycloak Realm import configuration.
  keycloakRealmImport:
    # Enables the Keycloak Realm import.
    enabled: true
    # Keycloak's CRD instance namespace and name. The local cluster instance where
    # this Realm will be imported.
    keycloakCR:
      namespace: __OVERWRITE_ME__
      name: __OVERWRITE_ME__
    # Realm's admin user.
    adminSecretName: tpa-realm-chicken-admin
    # Name of the Secret generated with the enabled OIDC clients secrets, each
    # client key on the ".client" object will become a Secret key.
    oidcClientsSecretName: &oidcClientsSecretName tpa-realm-chicken-clients
    # Realm clients are imported by default, and the ones described below you can
    # toggle on/off. The testing users are disabled by default.
    clients:
      walker:
        enabled: true
      testingManager:
        enabled: false
      testingUser:
        enabled: false
    # List of valid project URIs added to the "frontend" client, all the TPA
    # application endpoints must be listed here.
    frontendRedirectUris:
      - "http://localhost:8080"
      - "http://console-rhtap-tpa.apps-crc.testing"
      - "http://console-rhtap-tpa.apps-crc.testing/*"
      - "http://sbom-rhtap-tpa.apps-crc.testing"
      - "http://sbom-rhtap-tpa.apps-crc.testing/*"
      - "http://vex-rhtap-tpa.apps-crc.testing"
      - "http://vex-rhtap-tpa.apps-crc.testing/*"

#
# Red Hat Trusted Profile Analyzer
#
#  https://access.redhat.com/products/red-hat-trusted-profile-analyzer
#  https://github.com/openshift-helm-charts/charts/tree/main/charts/redhat/redhat/redhat-trusted-profile-analyzer
#
redhat-trusted-profile-analyzer:
  appDomain: __OVERWRITE_ME__
  replicas: 1
  rust:
    logFilter: debug
    backtrace: true
  openshift: &tpaOpenShift
    # The "useServiceCa" attribute is used to enable the OpenShift service CA,
    # when false it use "http" communication for internal services, something only
    # advisable for CRC, testing, etc.
    useServiceCa: true
  ingress: &tpaIngress
    className: openshift-default
  guac: &tpaGUAC
    database:
      sslMode: disable
      name:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: dbname
      host:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: host
      port:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: port
      username:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: user
      password:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: password
    initDatabase:    
      sslMode: disable
      name:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: dbname
      host:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: host
      port:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: port
      username:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: user
      password:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: password
  storage: &tpaStorage
    endpoint: __OVERWRITE_ME__
    accessKey:
      valueFrom:
        secretKeyRef:
          name: __OVERWRITE_ME__
          key: username
    secretKey:
      valueFrom:
        secretKeyRef:
          name: __OVERWRITE_ME__
          key: password
  # The event bus in the Trustification project exchanges system events, data
  # events, user actions, and integration events to facilitate communication
  # between components.
  eventBus:
    type: kafka
    bootstrapServers: tpa-kafka-bootstrap
    config:
      mechanism: SCRAM-SHA-512
      securityProtocol: SASL_PLAINTEXT
      username: __OVERWRITE_ME__
      password:
        valueFrom:
          secretKeyRef:
            name: __OVERWRITE_ME__
            key: password
  # OIDC client configuration for the TPA and Keycloak realm import.
  oidc: &tpaOIDC
    issuerUrl: __OVERWRITE_ME__
    clients:
      # The "frontend" client is used by the TPA application, it must always be
      # enabled for the dependencies to work.
      frontend:
        clientId: frontend
      # A specialized crawler to interact with external data sources, this client
      # is used by other TPA modules.
      walker:
        clientId: walker
        clientSecret:
          valueFrom:
            secretKeyRef:
              name: *oidcClientsSecretName
              key: walker
      # Testing clients, disabled by default. These clients are used for testing
      # TPA by injecting data in the system and analyzing the results, as a
      # regular user and a privileged manager.
      # testingUser:
      #   clientId: testing-user
      #   clientSecret:
      #     valueFrom:
      #       secretKeyRef:
      #         name: *oidcClientsSecretName
      #         key: testingUser
      # testingManager:
      #   clientId: testing-manager
      #   clientSecret:
      #     valueFrom:
      #       secretKeyRef:
      #         name: *oidcClientsSecretName
      #         key: testingManager
  modules:
    # The Bombastic API walker is a component designed to crawl and process
    # security data, specifically Software Bill of Materials (SBOM) from external
    # sources
    bombasticWalker:
      sources:
        redhat:
          url: https://access.redhat.com/security/data/sbom/beta/
          signingKeyUrl: https://access.redhat.com/security/data/97f5eac4.txt#77E79ABE93673533ED09EBE2DCE3823597F5EAC4
          acceptV3Signatures: true
          fixLicenses: true
          job:
            schedule: "0 * * * *"
    # The "vexination walker" is a component designed for processing Vulnerability
    # EXchange (VEX) files within the Vexination service. 
    vexinationWalker:
      sources:
        redhat:
          url: https://www.redhat.com/.well-known/csaf/provider-metadata.json
          acceptV3Signatures: true
          ignoreDistributions:
            - https://access.redhat.com/security/data/csaf/v2/advisories/
          job:
            schedule: "0 * * * *"
  # Authentication method for the TPA application, by default "keycloak".
  authenticator:
    type: keycloak
  # TLS configuration.
  tls: &tpaTLS
    serviceEnabled: true
    # Additional CA certificates to trust, which is fundamental to support
    # OpenShift internal TLS communication.
    additionalTrustAnchor: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt 

#
# Trustification Helm chart values, linking its configuration with Red Hat's
# Trusted Profile Analyzer chart sections.
#
#   https://github.com/trustification/trustification
#
trustification:
  appDomain: __OVERWRITE_ME__
  # openshift: *tpaOpenShift
  # storage: *tpaStorage
  # oidc: *tpaOIDC
  # guac: *tpaGUAC
  # ingress: *tpaIngress
  # tls: *tpaTLS
    
